function readUIntVByteLength(buffer) {
    if (buffer[0] & 1) {
        return 1;
    }
    else if (buffer[0] & 2) {
        return 2;
    }
    else if (buffer[0] & 4) {
        return 3;
    }
    else {
        return 4;
    }
}
function writeUIntv(buffer) {
    const length = buffer.length;
    if (length < 0x80) {
        const size = Buffer.alloc(1);
        size.writeUInt8((length << 1) + 1);
        return Buffer.concat([size, buffer]);
    }
    else if (length < 0x4080) {
        const size = Buffer.alloc(2);
        size.writeUInt16LE(((length - 0x80) << 2) + 2);
        return Buffer.concat([size, buffer]);
    }
    else if (length < 0x204080) {
        const size = Buffer.alloc(3);
        const writeValue = ((length - 0x4080) << 3) + 4;
        size.writeUInt8((writeValue & 0xFF));
        size.writeUInt16LE(writeValue >> 8, 1);
        return Buffer.concat([size, buffer]);
    }
    else {
        const size = Buffer.alloc(4);
        size.writeUInt32LE((length - 0x204080) * 8);
        return Buffer.concat([size, buffer]);
    }
}
module.exports = { readUIntVByteLength, writeUIntv };
