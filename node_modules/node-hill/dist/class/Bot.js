"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = require("events");
const Game_1 = __importDefault(require("./Game"));
const Vector3_1 = __importDefault(require("./Vector3"));
const PacketBuilder_1 = __importStar(require("../net/PacketBuilder"));
const botIds_1 = __importDefault(require("../net/BrickHillPackets/botIds"));
const setAvatar_1 = __importDefault(require("../scripts/player/setAvatar"));
class Bot extends events_1.EventEmitter {
    constructor(name) {
        super();
        this.speech = "";
        this.position = new Vector3_1.default(0, 0, 0);
        this.rotation = new Vector3_1.default(0, 0, 0);
        this.scale = new Vector3_1.default(1, 1, 1);
        Bot.botId += 1;
        this._steps = [];
        this.destroyed = false;
        this.name = name;
        this.netId = Bot.botId;
        this.speech = "";
        this.position = new Vector3_1.default(0, 0, 0);
        this.rotation = new Vector3_1.default(0, 0, 0);
        this.scale = new Vector3_1.default(1, 1, 1);
        this.colors = {
            head: "#d9bc00",
            torso: "#d9bc00",
            leftArm: "#d9bc00",
            rightArm: "#d9bc00",
            leftLeg: "#d9bc00",
            rightLeg: "#d9bc00",
        };
        this.assets = {
            tool: 0,
            face: 0,
            hat1: 0,
            hat2: 0,
            hat3: 0,
        };
        this.on("newListener", (event) => {
            if (event !== "touching")
                return;
            this._detectTouching();
        });
        this.on("removeListener", (event) => {
            if (event !== "touching")
                return;
            if (this.listenerCount("touching"))
                return;
            clearInterval(this._hitMonitor);
        });
    }
    destroy() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.destroyed)
                return Promise.reject("Bot has already been destroyed.");
            const bots = Game_1.default.world.bots;
            clearInterval(this._hitMonitor);
            this._steps.forEach((loop) => {
                clearInterval(loop);
            });
            this.removeAllListeners();
            const index = bots.indexOf(this);
            if (index !== -1)
                bots.splice(index, 1);
            yield new PacketBuilder_1.default(PacketBuilder_1.PacketEnums.DestroyBot)
                .write("uint32", this.netId)
                .broadcast();
            this.netId = undefined;
            this.destroyed = true;
        });
    }
    setInterval(callback, delay) {
        let loop = setInterval(callback, delay);
        this._steps.push(loop);
        return loop;
    }
    setPosition(position) {
        return __awaiter(this, void 0, void 0, function* () {
            this.position = new Vector3_1.default().fromVector(position);
            return botIds_1.default(this, "BCDG");
        });
    }
    setRotation(rotation) {
        return __awaiter(this, void 0, void 0, function* () {
            this.rotation = new Vector3_1.default().fromVector(rotation);
            return botIds_1.default(this, "EFG");
        });
    }
    setScale(scale) {
        return __awaiter(this, void 0, void 0, function* () {
            this.scale = new Vector3_1.default().fromVector(scale);
            return botIds_1.default(this, "HIJ");
        });
    }
    setSpeech(speech) {
        return __awaiter(this, void 0, void 0, function* () {
            this.speech = speech;
            return botIds_1.default(this, "X");
        });
    }
    setOutfit(outfit) {
        return __awaiter(this, void 0, void 0, function* () {
            return botIds_1.default(this, outfit.idString);
        });
    }
    lookAtPoint(position) {
        return __awaiter(this, void 0, void 0, function* () {
            let angle = Math.atan2(position.y - this.position.y, position.x - this.position.x);
            angle = -(angle * (180 / Math.PI)) + 270;
            this.rotation.z = angle;
            yield botIds_1.default(this, "G");
            return angle;
        });
    }
    lookAtPlayer(player) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.lookAtPoint(player.position);
        });
    }
    moveTowardsPoint(pos, speed = 5) {
        return __awaiter(this, void 0, void 0, function* () {
            speed *= 0.01;
            const angle = Math.atan2(pos.y - this.position.y, pos.x - this.position.x);
            const rot = -(angle * (180 / Math.PI)) + 270;
            this.position.x += Math.cos(angle) * speed;
            this.position.y += Math.sin(angle) * speed;
            this.rotation.z = rot;
            return botIds_1.default(this, "BCDG");
        });
    }
    moveTowardsPlayer(player, speed) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.moveTowardsPoint(player.position, speed);
        });
    }
    findClosestPlayer(minDist) {
        let target;
        for (let player of Game_1.default.players) {
            if (player.destroyed || !player.alive)
                continue;
            const dist = Game_1.default.pointDistance3D(player.position, this.position);
            if (dist <= minDist) {
                minDist = dist;
                target = player;
            }
        }
        return target;
    }
    setAvatar(userId) {
        return __awaiter(this, void 0, void 0, function* () {
            yield setAvatar_1.default(this, userId);
            return botIds_1.default(this, "KLMNOPQUVW");
        });
    }
    touching(callback) {
        const touchEvent = (p) => {
            callback(p);
        };
        this.on("touching", touchEvent);
        return {
            disconnect: () => this.off("command", touchEvent)
        };
    }
    _detectTouching() {
        this._hitMonitor = setInterval(() => {
            if (!Game_1.default.playerCount)
                return;
            for (let player of Game_1.default.players) {
                if (!player.destroyed && player.alive) {
                    if (Game_1.default.pointDistance3D(player.position, this.position) <= 2)
                        this.emit("touching", player);
                }
            }
        }, 100);
    }
}
exports.default = Bot;
Bot.botId = 0;
