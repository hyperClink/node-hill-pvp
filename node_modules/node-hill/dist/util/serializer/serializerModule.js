"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const zlib = __importStar(require("zlib"));
const Brick_1 = __importDefault(require("../../class/Brick"));
const Vector3_1 = __importDefault(require("../../class/Vector3"));
const DEFAULT_BRICK = new Brick_1.default();
function serialize(bricks) {
    let binaryData = [];
    bricks.forEach((brick) => {
        let data = {};
        if (!brick.position.equalsVector(DEFAULT_BRICK.position))
            data.position = [brick.position.x, brick.position.y, brick.position.z];
        if (!brick.scale.equalsVector(DEFAULT_BRICK.scale))
            data.scale = [brick.scale.x, brick.scale.y, brick.scale.z];
        if (brick.color !== DEFAULT_BRICK.color)
            data.color = brick.color;
        if (brick.visibility < 1)
            data.visibility = brick.visibility;
        if (!brick.collision)
            data.collision = false;
        if (brick.name)
            data.name = brick.name;
        if (brick.rotation)
            data.rotation = brick.rotation;
        if (brick.model)
            data.model = brick.model;
        if (brick.lightEnabled) {
            data.lightEnabled = true;
            data.lightColor = brick.lightColor;
            data.lightrange = brick.lightRange;
        }
        if (brick.clickable) {
            data.clickable = true;
            data.clickDistance = brick.clickDistance;
        }
        binaryData.push(data);
    });
    binaryData = JSON.stringify(binaryData);
    binaryData = zlib.deflateSync(binaryData);
    return binaryData;
}
function deserialize(data) {
    data = zlib.inflateSync(data);
    data = JSON.parse(data.toString("ascii"));
    let bricks = [];
    data.forEach((brick) => {
        let newBrick = new Brick_1.default(brick.position, brick.scale, brick.color);
        Object.keys(brick).forEach((prop) => {
            if (typeof brick[prop] === "object")
                brick[prop] = new Vector3_1.default(...brick[prop]);
            newBrick[prop] = brick[prop];
        });
        bricks.push(newBrick);
    });
    return bricks;
}
exports.default = { serialize, deserialize };
